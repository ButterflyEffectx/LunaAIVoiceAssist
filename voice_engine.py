from gtts import gTTS
import pygame
import os
import tempfile
import time
import re
from pydub import AudioSegment
from pydub.effects import normalize

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ffmpeg
AudioSegment.converter = r"C:\Users\onyou\Downloads\ffmpeg-7.1.1-essentials_build\ffmpeg-7.1.1-essentials_build\bin\ffmpeg.exe"
AudioSegment.ffprobe = r"C:\Users\onyou\Downloads\ffmpeg-7.1.1-essentials_build\ffmpeg-7.1.1-essentials_build\bin\ffprobe.exe"

def preprocess_text(text):
    """‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏π‡∏î"""
    text = re.sub(r'([,.!?])', r'\1 ', text)
    text = re.sub(r'\.', '.  ', text)
    text = re.sub(r'([!?])', r'\1  ', text)
    text = re.sub(r'(\d+)', r' \1 ', text)
    return text.strip()

def speak(text, speed=1.15, pitch_adjustment=1.07):
    """
    ‡∏û‡∏π‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡πÅ‡∏´‡∏•‡∏° ‡∏™‡∏î‡πÉ‡∏™
    - speed: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ (1.15 = ‡∏™‡∏î‡πÉ‡∏™)
    - pitch_adjustment: ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏´‡∏•‡∏°‡∏Ç‡∏∂‡πâ‡∏ô (1.07 = ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏ï‡∏π‡∏ô)
    """
    print(f"Luna üí¨: {text}")
    
    processed_text = preprocess_text(text)
    temp_dir = tempfile.gettempdir()
    now = int(time.time())
    temp_mp3_path = os.path.join(temp_dir, f"luna_temp_{now}.mp3")
    temp_processed_path = os.path.join(temp_dir, f"luna_processed_{now}.mp3")

    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡πâ‡∏ß‡∏¢ Google TTS
        tts = gTTS(text=processed_text, lang='th', slow=False)
        tts.save(temp_mp3_path)

        if not os.path.exists(temp_mp3_path):
            print("Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå TTS ‡πÑ‡∏î‡πâ")
            return

        # ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        sound = AudioSegment.from_file(temp_mp3_path)

        # ‡∏õ‡∏£‡∏±‡∏ö pitch ‡πÉ‡∏´‡πâ‡πÅ‡∏´‡∏•‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        bright_voice = sound._spawn(sound.raw_data, overrides={
            "frame_rate": int(sound.frame_rate * pitch_adjustment)
        }).set_frame_rate(sound.frame_rate)

        # Normalize ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏´‡πâ‡∏™‡∏î‡πÉ‡∏™
        final_sound = normalize(bright_voice)
        final_sound = final_sound.apply_gain(-2)  # ‡∏•‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        final_sound = final_sound.fade_in(30).fade_out(30)

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
        if speed != 1.0:
            final_sound = final_sound.speedup(playback_speed=speed)

        # Export ‡πÑ‡∏ü‡∏•‡πå
        final_sound.export(temp_processed_path, format="mp3", parameters=["-q:a", "2"])

        if not os.path.exists(temp_processed_path):
            print("Error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏î‡πâ")
            return

        # ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
        pygame.mixer.init(frequency=44100, size=-16, channels=2, buffer=512)
        pygame.mixer.music.load(temp_processed_path)
        pygame.mixer.music.play()

        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)

        pygame.mixer.quit()
        time.sleep(0.1)

    except Exception as e:
        print(f"Error in speak function: {e}")

    finally:
        try:
            if os.path.exists(temp_mp3_path):
                os.remove(temp_mp3_path)
            if os.path.exists(temp_processed_path):
                os.remove(temp_processed_path)
        except Exception as e:
            print(f"Warning: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå temp ‡πÑ‡∏î‡πâ: {e}")

def speak_with_emotion(text, emotion="happy"):
    """
    ‡∏û‡∏π‡∏î‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å happy ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡πÉ‡∏™ ‡πÜ)
    """
    if emotion == "happy":
        speak(text, speed=1.15, pitch_adjustment=1.07)
    elif emotion == "serious":
        speak(text, speed=1.05, pitch_adjustment=0.96)
    elif emotion == "calm":
        speak(text, speed=1.0, pitch_adjustment=0.92)
    else:
        speak(text)

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
if __name__ == "__main__":
    speak_with_emotion("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞ ‡∏•‡∏π‡∏ô‡πà‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏ß ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏∏‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞!", "happy")
